using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using
    Microsoft.CodeAnalysis.CSharp.Syntax
    ;
using Microsoft.CodeAnalysis.Formatting;

namespace ConsoleApplication1
{
    public class MyRewriter :
        CSharpSyntaxRewriter
    {
        internal static void Execute()
        {
            const string source = @"
public class MyOuterClass
{
    private int _myField;
    private string anotherField;
    private double x, _y;
    

    private class MyInnerClass
    {
        private int _innerField;
        public int anotherInnerField;
    }
}
";
            var tree =
                CSharpSyntaxTree
                    .ParseText(source);
            var rewriter =
                new MyRewriter().Visit(
                    tree.GetRoot());
            var formattedTree =
                Formatter.Format(
                    rewriter,
                    Formatter.Annotation,
                    new AdhocWorkspace());
            Console.WriteLine(
                formattedTree
                    .ToFullString());
        }

        public override SyntaxNode
            VisitFieldDeclaration(
            FieldDeclarationSyntax node)
        {
            var newDeclarators =
                new List
                    <
                        VariableDeclaratorSyntax
                        >();

            foreach (
                var declarator in
                    node.Declaration
                        .Variables)
            {
                var currentIdentifier =
                    declarator
                        .Identifier;
                if (
                    !currentIdentifier
                        .ValueText
                        .StartsWith("_") &&
                    node.Modifiers.Any(
                        x =>
                            x.Kind() ==
                            SyntaxKind
                                .PrivateKeyword))
                {
                    var newIdentifier =
                        SyntaxFactory
                            .Identifier(
                                currentIdentifier
                                    .LeadingTrivia,
                                "_" +
                                currentIdentifier
                                    .ValueText,
                                currentIdentifier
                                    .TrailingTrivia);
                    var newDeclarator =
                        declarator
                            .WithIdentifier
                            (newIdentifier);
                    newDeclarators.Add(
                        newDeclarator);
                }
                else
                {
                    newDeclarators.Add(
                        declarator);
                }
            }
            var newDeclaration =
                SyntaxFactory
                    .VariableDeclaration
                    (node.Declaration
                         .Type,
                        SyntaxFactory
                            .SeparatedList
                            (newDeclarators));
            var newField =
                SyntaxFactory
                    .FieldDeclaration(
                        node
                            .AttributeLists,
                        node.Modifiers,
                        newDeclaration)
                    .WithAdditionalAnnotations
                    (Formatter
                        .Annotation);
            return newField;
        }
    }
}